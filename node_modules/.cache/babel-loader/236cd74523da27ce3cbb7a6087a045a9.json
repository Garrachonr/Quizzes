{"ast":null,"code":"var _jsxFileName = \"/Users/garra/Documents/Universidad/Cuarto/IWEB/React1/src/components/timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Countdown(props) {\n  _s();\n\n  const [pause, setPause] = useState(false); // const [count, setCount] = useState(60);\n\n  let intervalRef = useRef(); //Bajamos el contador en una unidad\n\n  const decreaseCount = () => {\n    prop.setCount(prev => prev - 1);\n  };\n\n  const handleClick = () => {\n    if (!pause) {\n      clearInterval(intervalRef.current);\n    } else {\n      intervalRef.current = setInterval(decreaseCount, 1000);\n    } //cambia el estado del pause\n\n\n    setPause(prev => !prev);\n  }; //Decrementamos con intervalos de 1 segundo, se ejecuta con cada cambio del estado (en este caso, cuando se decrementa)\n  //Ejemplo adaptado de la diapositiva 86 de la teoría\n\n\n  useEffect(() => {\n    setPause(false);\n    intervalRef.current = setInterval(decreaseCount, 1000);\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  if (prop.count == 0 || prop.count < 0) {\n    props.end(prop.count);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: prop.count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: pause ? \">\" : \"||\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Countdown, \"YMJxLliy5UTEI1uisvrWRCDQqtE=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/Users/garra/Documents/Universidad/Cuarto/IWEB/React1/src/components/timer.js"],"names":["React","useRef","useEffect","useState","Countdown","props","pause","setPause","intervalRef","decreaseCount","prop","setCount","prev","handleClick","clearInterval","current","setInterval","count","end"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAErC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,KAAD,CAAlC,CAFqC,CAGrC;;AAEA,MAAIK,WAAW,GAAGP,MAAM,EAAxB,CALqC,CAQrC;;AACA,QAAMQ,aAAa,GAAG,MAAM;AACxBC,IAAAA,IAAI,CAACC,QAAL,CAAeC,IAAD,IAAUA,IAAI,GAAG,CAA/B;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACtB,QAAI,CAACP,KAAL,EAAY;AACRQ,MAAAA,aAAa,CAACN,WAAW,CAACO,OAAb,CAAb;AACH,KAFD,MAEO;AACHP,MAAAA,WAAW,CAACO,OAAZ,GAAsBC,WAAW,CAACP,aAAD,EAAgB,IAAhB,CAAjC;AACH,KALqB,CAMtB;;;AACAF,IAAAA,QAAQ,CAAEK,IAAD,IAAU,CAACA,IAAZ,CAAR;AACH,GARD,CAbqC,CAuBrC;AACA;;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAC,IAAAA,WAAW,CAACO,OAAZ,GAAsBC,WAAW,CAACP,aAAD,EAAgB,IAAhB,CAAjC;AACA,WAAO,MAAM;AACTK,MAAAA,aAAa,CAACN,WAAW,CAACO,OAAb,CAAb;AACH,KAFD;AAGH,GANQ,EAMN,EANM,CAAT;;AASA,MAAIL,IAAI,CAACO,KAAL,IAAc,CAAd,IAAmBP,IAAI,CAACO,KAAL,GAAa,CAApC,EAAuC;AACnCZ,IAAAA,KAAK,CAACa,GAAN,CAAUR,IAAI,CAACO,KAAf;AACH;;AACD,sBACI;AAAA,4BACI;AAAA,gBAAMP,IAAI,CAACO;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEJ,WAAjB;AAAA,gBAA+BP,KAAK,GAAG,GAAH,GAAS;AAA7C;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GAlDuBF,S;;KAAAA,S","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nexport default function Countdown(props) {\n\n    const [pause, setPause] = useState(false);\n    // const [count, setCount] = useState(60);\n\n    let intervalRef = useRef();\n\n\n    //Bajamos el contador en una unidad\n    const decreaseCount = () => {\n        prop.setCount((prev) => prev - 1);\n    };\n\n    const handleClick = () => {\n        if (!pause) {\n            clearInterval(intervalRef.current);\n        } else {\n            intervalRef.current = setInterval(decreaseCount, 1000);\n        }\n        //cambia el estado del pause\n        setPause((prev) => !prev);\n    };\n\n    //Decrementamos con intervalos de 1 segundo, se ejecuta con cada cambio del estado (en este caso, cuando se decrementa)\n    //Ejemplo adaptado de la diapositiva 86 de la teoría\n    useEffect(() => {\n        setPause(false);\n        intervalRef.current = setInterval(decreaseCount, 1000);\n        return () => {\n            clearInterval(intervalRef.current);\n        }\n    }, []);\n\n\n    if (prop.count == 0 || prop.count < 0) {\n        props.end(prop.count);\n    }\n    return (\n        <div>\n            <div>{prop.count}</div>\n            <button onClick={handleClick}>{pause ? \">\" : \"||\"}</button>\n        </div>\n    );\n\n\n\n\n\n\n\n}"]},"metadata":{},"sourceType":"module"}